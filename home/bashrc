# ~/.bashrc: executed by bash(1) for non-login shells.
# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
# for examples

#eval "$(thefuck --alias)"
# You can use whatever you want as an alias, like for Mondays:
#eval "$(thefuck --alias FUCK)"

# Android development tools (e.g. adb)
export PATH=$PATH:~/Android/Sdk/platform-tools

# Better, faster replacement for cloc (in Rust!)
# https://github.com/Aaronepower/tokei
alias cloc="tokei"

# Extra directory like /usr and /usr/local created because root partition filled up
export PATH=$PATH:~/.usr/bin

# Cabal executable directory
export PATH=~/.cabal/bin:/opt/cabal/1.22/bin:/opt/ghc/7.10.3/bin:$PATH

# The directory that stack installs executables
export PATH=$PATH:~/.local/bin

# Making sure cargo install binaries are visible
source $HOME/.cargo/env

# swift language
export PATH=/home/sunjay/Programs/swift/usr/bin/:"${PATH}"

# Rust src path
# See: https://github.com/rust-lang-nursery/rls#setup
export RUST_SRC_PATH=~/.multirust/toolchains/nightly-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/

# haskell language
alias haskell=ghci
export PATH=/opt/ghc/bin/:"${PATH}"

# node language
export PATH="$PATH:`yarn global bin`"

alias open="xdg-open"

# clojure
alias clojurei="lein repl"
alias clojure="lein"

export WORKON_HOME=.
export PROJECT_HOME=$HOME/Devel
source /usr/local/bin/virtualenvwrapper.sh

export NVM_DIR="/home/sunjay/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm

# For afterglow xbox controller -- may not necessarily work with multiple controllers (untested), try removing dbus argument if problems
alias afterglowxbox="sudo xboxdrv --detach-kernel-driver --quiet --mimic-xpad -s"

# ssh quick aliases
alias gttt="ssh root@geniustictactoe.com"

# University of Waterloo Student Linux
alias cslinux-student="ssh s5varma@linux.student.cs.uwaterloo.ca"
alias cslinux-student-x11="ssh -Y s5varma@linux.student.cs.uwaterloo.ca"
alias matlab="cslinux-student-x11 -t '/bin/bash -lc matlab'"
# University of Waterloo ECE Linux
alias ecelinux="ssh s5varma@ecelinux.uwaterloo.ca"

# Research machine for plg.uwaterloo.ca
alias plg="ssh s5varma@plg2.uwaterloo.ca"
alias plg-sync='rsync --exclude-from=.gitignore --exclude=.git -avzPHu "$(readlink -f ~/Documents/projects/cfa-cc/src/)" s5varma@plg2.uwaterloo.ca:/u0/s5varma/software/cfa-cc/'

# repeat a command over and over again with 2 second sleep
function repeat {
    while true :
        do
            "$@";
            sleep 2;
    done
}

# attempts to fix the problem where the bluetooth turns itself off
# over and over again when something goes wrong
alias fixbluetooth="rfkill list bluetooth && rfkill unblock bluetooth && rfkill list bluetooth"

# Tries to restart cinnamon (use from tty - Ctrl + Alt + F6 or Fn)
# Note: for this to work, run the w command and make sure the DISPLAY number
# in the FROM column is correct
alias restartcinnamon="export DISPLAY=:0.0; cinnamon"

###-begin-npm-completion-###
#
# npm command completion script
#
# Installation: npm completion >> ~/.bashrc  (or ~/.zshrc)
# Or, maybe: npm completion > /usr/local/etc/bash_completion.d/npm
#

if type complete &>/dev/null; then
  _npm_completion () {
    local words cword
    if type _get_comp_words_by_ref &>/dev/null; then
      _get_comp_words_by_ref -n = -n @ -w words -i cword
    else
      cword="$COMP_CWORD"
      words=("${COMP_WORDS[@]}")
    fi

    local si="$IFS"
    IFS=$'\n' COMPREPLY=($(COMP_CWORD="$cword" \
                           COMP_LINE="$COMP_LINE" \
                           COMP_POINT="$COMP_POINT" \
                           npm completion -- "${words[@]}" \
                           2>/dev/null)) || return $?
    IFS="$si"
  }
  complete -o default -F _npm_completion npm
elif type compdef &>/dev/null; then
  _npm_completion() {
    local si=$IFS
    compadd -- $(COMP_CWORD=$((CURRENT-1)) \
                 COMP_LINE=$BUFFER \
                 COMP_POINT=0 \
                 npm completion -- "${words[@]}" \
                 2>/dev/null)
    IFS=$si
  }
  compdef _npm_completion npm
elif type compctl &>/dev/null; then
  _npm_completion () {
    local cword line point words si
    read -Ac words
    read -cn cword
    let cword-=1
    read -l line
    read -ln point
    si="$IFS"
    IFS=$'\n' reply=($(COMP_CWORD="$cword" \
                       COMP_LINE="$line" \
                       COMP_POINT="$point" \
                       npm completion -- "${words[@]}" \
                       2>/dev/null)) || return $?
    IFS="$si"
  }
  compctl -K _npm_completion npm
fi
###-end-npm-completion-###

export PATH="$PATH:$HOME/.rvm/bin" # Add RVM to PATH for scripting

[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm" # Load RVM into a shell session *as a function*

##### AUTO-GENERATED SECTION INCLUDED WITH LINUX #####

# If not running interactively, don't do anything
case $- in
    *i*) ;;
      *) return;;
esac

# don't put duplicate lines or lines starting with space in the history.
# See bash(1) for more options
HISTCONTROL=ignoreboth

# append to the history file, don't overwrite it
shopt -s histappend

# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
HISTSIZE=1000
HISTFILESIZE=2000

# check the window size after each command and, if necessary,
# update the values of LINES and COLUMNS.
shopt -s checkwinsize

# If set, the pattern "**" used in a pathname expansion context will
# match all files and zero or more directories and subdirectories.
#shopt -s globstar

# make less more friendly for non-text input files, see lesspipe(1)
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "${debian_chroot:-}" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

# set a fancy prompt (non-color, unless we know we "want" color)
case "$TERM" in
    xterm|xterm-color|*-256color) color_prompt=yes;;
esac

# uncomment for a colored prompt, if the terminal has the capability; turned
# off by default to not distract the user: the focus in a terminal window
# should be on the output of commands, not on the prompt
#force_color_prompt=yes

if [ -n "$force_color_prompt" ]; then
    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
	# We have color support; assume it's compliant with Ecma-48
	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
	# a case would tend to support setf rather than setaf.)
	color_prompt=yes
    else
	color_prompt=
    fi
fi

if [ "$color_prompt" = yes ]; then
    if [[ ${EUID} == 0 ]] ; then
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;31m\]\h\[\033[01;34m\] \W \$\[\033[00m\] '
    else
        PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\] \[\033[01;34m\]\w \$\[\033[00m\] '
    fi
else
    PS1='${debian_chroot:+($debian_chroot)}\u@\h \w \$ '
fi
unset color_prompt force_color_prompt

# If this is an xterm set the title to user@host:dir
case "$TERM" in
xterm*|rxvt*)
    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h \w\a\]$PS1"
    ;;
*)
    ;;
esac

# enable color support of ls and also add handy aliases
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
    alias ls='ls --color=auto'
    #alias dir='dir --color=auto'
    #alias vdir='vdir --color=auto'

    alias grep='grep --color=auto'
    alias fgrep='fgrep --color=auto'
    alias egrep='egrep --color=auto'
fi

# colored GCC warnings and errors
#export GCC_COLORS='error=01;31:warning=01;35:note=01;36:caret=01;32:locus=01:quote=01'

# some more ls aliases
alias ll='ls -alF'
alias la='ls -A'
alias l='ls -CF'

# Add an "alert" alias for long running commands.  Use like so:
#   sleep 10; alert
alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'

# Alias definitions.
# You may want to put all your additions into a separate file like
# ~/.bash_aliases, instead of adding them here directly.
# See /usr/share/doc/bash-doc/examples in the bash-doc package.

if [ -f ~/.bash_aliases ]; then
    . ~/.bash_aliases
fi

# enable programmable completion features (you don't need to enable
# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
# sources /etc/bash.bashrc).
if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

if [ -x /usr/bin/mint-fortune ]; then
     /usr/bin/mint-fortune
fi

# Copy to clipboard via xclip (apt install xclip)
alias copy='xclip -selection clipboard'

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# added by travis gem
[ -f /home/sunjay/.travis/travis.sh ] && source /home/sunjay/.travis/travis.sh

# exercism.io
if [ -f ~/.config/exercism/exercism_completion.bash ]; then
  . ~/.config/exercism/exercism_completion.bash
fi


export SWIVM_DIR="/home/sunjay/.swivm"
[ -s "$SWIVM_DIR/swivm.sh" ] && . "$SWIVM_DIR/swivm.sh"  # This loads swivm

# For ClockworkPI GameShell - device must be ON
export CPI_ADDR=192.168.0.119
alias cpi='ssh cpi@$CPI_ADDR'
function copy_cpi() {
    if (( $# < 2 )); then
        echo "usage: cpi-cp file destination" >&2
        return 1
    fi 
    # Copy all the files except the last argument
    # Last argument is used for destination path
    rsync -vazPh --update ${@:1:$#-1} cpi@$CPI_ADDR:${!#}
}
alias cpi-cp='copy_cpi'
alias cpi-cp-caves='cpi-cp assets target/armv7-unknown-linux-gnueabihf/release/caves games/Rust/caves/'

source /usr/share/bash-completion/completions/git
# (or /etc/bash_completion.d/git-completion.bash)
alias g='git'
__git_complete g __git_main

# Java 8 JDK Setup + checker framework
export JAVA_8_HOME=/usr/lib/jvm/java-8-openjdk-amd64
export JAVA_HOME=$JAVA_8_HOME
export PATH=$JAVA_HOME/bin:$PATH
export JSR308=$HOME/Documents/projects/jsr308
export PATH=$CHECKERFRAMEWORK/checker/bin-devel:${PATH}
export AFU=$JSR308/annotation-tools/annotation-file-utilities
export PATH=$AFU/scripts:$JSR308/z3/bin:$PATH


